# change prefix key(same to screen)
# unbind-key C-a
# set-option -g prefix C-a
# C-b is fine with me

# nested tmux session prefix key (gnu screen style)
bind-key a send-prefix

set-option -g base-index 1
set-window-option -g pane-base-index 1

# fix delay between tmux and vim
set-option -sg escape-time 0

# default shell
#cur_shell=(run "echo $SHELL")
#set-option -g default-command "$cur_shell"
#set-option -g default-shell "$cur_shell"

# reload config
bind-key r source-file ~/.tmux.conf \; display-message "Tmux Configuration Reloaded"
# bind -r T split-window -b -p 35 -h -c "#{pane_current_path}" "[[ -e TODO.md ]] && nvim TODO.md || nvim ~/dotfiles/todo.md"

# set display timelimit
set-option -g display-panes-time 2000
set-option -g display-time 1500

# history size
set-option -g history-limit 20000

# get 256color support tmux

set-option -g default-terminal "screen.xterm-256color"
# set -g default-terminal "screen-256color"
# set-option -g default-terminal "xterm-256color"

set -ga terminal-overrides ",*256col*:Tc"

# vim keys in command prompt
set-option -g status-keys vi

# set focus-events (recommended by nvim checkhealth)
set-option -g focus-events on

# from vim-tmux-navigator(vim plugin)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
	| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# alternate mapping to clear screen(and clear history)
bind C-l send-keys 'C-l'; run 'tmux clear-history'

#is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
	#| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"
# for fzf use, <C-n> and <C-p> or <tab> for navigation

# resize panes
bind-key -r M-h resize-pane -L 2
bind-key -r M-k resize-pane -U 2
bind-key -r M-j resize-pane -D 2
bind-key -r M-l resize-pane -R 2

# cycle windows/panes (no prefix)
bind-key -n M-K select-pane -t :.- # prev pane
bind-key -n M-J select-pane -t :.+ # next pane
bind-key -n M-H select-pane -t :-  # previous window
bind-key -n M-L select-pane -t :+  # next window

# split pane
unbind '"'
unbind %
unbind -
bind \\ split-window -h -c "#{pane_current_path}"  # vertical split(default %)
bind - split-window -v -c "#{pane_current_path}"  # horizontal split(default ")

# split full window pane
bind-key | split-window -fh -c "#{pane_current_path}"
bind-key _ split-window -fv -c "#{pane_current_path}"

# new window with the current path
bind-key C new-window -c "#{pane_current_path}"

# kill window/pane with confirmation
unbind x
unbind X
bind-key x kill-pane
bind-key X kill-window




# vim keys in copy and choose mode
set-window-option -g mode-keys vi

# copying selection vim style
# http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
# https://github.com/myfreeweb/dotfiles/blob/master/tmux.conf
bind-key Escape copy-mode			# default key: prefix [
bind-key p paste-buffer				# default key: prefix ] ; interactively clipboard history key: prefix =
bind-key P choose-buffer            # defautl with prefix =
bind-key + delete-buffer \; display-message "Deleted current Tmux Clipboard History"

# send to tmux clipboard or system clipboard
bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "copy to tmux clipboard"
bind-key > run-shell 'tmux show-buffer | xsel -i -b' \; display-message "copy to system clipboard"

# set the current tmux version (use this variable on if-shell commands)
# run-shell "tmux set-environment -g TMUX_VERSION $(tmux -V | cut -c 6-)"
run-shell "tmux set-environment -g TMUX_VERSION $(tmux -V | cut -c 6- | tr -d '[A-Z][a-z]')" # remove alphabets e.g 2.9a ==> 2.9 only
# or just do $(tmux -V | tr -d '[A-Z][a-z] ')

# vim copy mode rebinds for (tmux 2.4+)
# https://shapeshed.com/custom-vim-bindings-in-tmux-2-4/
# https://github.com/tmux/tmux/issues/754#issuecomment-303156000
# https://stackoverflow.com/a/40902312
# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  'bind-key -T copy-mode-vi v send-keys -X begin-selection; \
  bind-key -T copy-mode-vi V send-keys -X select-line; \
  bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle; \
  bind-key -T choice-mode-vi h send-keys -X tree-collapse ; \
  bind-key -T choice-mode-vi l send-keys -X tree-expand ; \
  bind-key -T choice-mode-vi H send-keys -X tree-collapse-all ; \
  bind-key -T choice-mode-vi L send-keys -X tree-expand-all ; \
  bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"; \
  bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"'


# use vim as copy mode
bind-key v capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "vim-copymode" '$SHELL -c "vim /tmp/tmux-buffer"'



# toggle mouse mode
bind-key m set-option -g -q mouse on \; display-message 'Mouse: ON'
bind-key M set-option -g -q mouse off \; display-message 'Mouse: OFF'

# Restore pre-2.1 behavior of scrolling with the scrollwheel in Vim,
# less, copy mode etc, otherwise entering copy mode if not already in
# it.
bind-key -T root WheelUpPane \
	if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
		'send -Mt=' \
		'if-shell -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'
bind-key -T root WheelDownPane \
	if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
		'send -Mt=' \
		'if-shell -Ft= "#{alternate_on}" "send -t= Down" "send -Mt="'


# start changing from here, next time

# pane divider color, non active pane
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
	'set-option -g pane-border-fg green; \
	set-option -g pane-border-bg black'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
	'set-option -g pane-border-style fg=black'
	# ,bg=black'

# pane divider color; active pane
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
	'set-option -g pane-active-border-fg white; \
	set-option -g pane-active-border-bg magenta'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc )" = 1 ]' \
	'set-option -g pane-active-border-style "fg=green'
	# ,bg=white"'


# toggle statusbar
bind-key C-t set-option status

set -g status-left-length 80
set -g status-left "working on#[fg=colour135] #S"
set -g window-status-current-format "#[fg=black,bold bg=default]│#[fg=white bg=cyan]#W#[fg=black,bold bg=default]│"
set -g window-status-current-format "#[fg=black,bold bg=default]│#[fg=colour135 bg=black]#W#[fg=black,bold bg=default]│"
set -g status-style bg=default
set -g status-right "#[fg=magenta] #[bg=gray] %b %d %Y %l:%M %p"
set -g status-right '#(gitmux "#{pane_current_path}")'
set -g status-justify centre

# refresh the statusbar
set-option -g status-interval 1

# cheatsheat
bind-key -r i run-shell "tmux neww mycht.sh"
